name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable]
    env:
      WASM_CHORD_TEST_MODEL: /tmp/wasm-chord-models/tinyllama-1.1b.Q4_K_M.gguf
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache test model
        id: cache-model
        uses: actions/cache@v3
        with:
          path: /tmp/wasm-chord-models
          key: ${{ runner.os }}-tinyllama-1.1b-q4km-v1

      - name: Download test model
        if: steps.cache-model.outputs.cache-hit != 'true'
        run: |
          mkdir -p /tmp/wasm-chord-models
          echo "ðŸ“¥ Downloading TinyLLaMA model..."
          wget -O /tmp/wasm-chord-models/tinyllama-1.1b.Q4_K_M.gguf \
            https://huggingface.co/TheBloke/TinyLlama-1.1B-Chat-v1.0-GGUF/resolve/main/tinyllama-1.1b-chat-v1.0.Q4_K_M.gguf
          ls -lh /tmp/wasm-chord-models/

      - name: Run tests
        run: cargo test --verbose --workspace

      - name: Run tests (release)
        run: cargo test --verbose --workspace --release

  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --workspace --lib -- -D warnings

  wasm:
    name: WASM Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build WASM runtime
        run: |
          cd crates/wasm-chord-runtime
          wasm-pack build --target web --out-dir pkg

      - name: Verify runtime artifacts
        run: |
          test -f crates/wasm-chord-runtime/pkg/wasm_chord_runtime_bg.wasm
          test -f crates/wasm-chord-runtime/pkg/wasm_chord_runtime.js

      - name: Build WASM capital test example
        run: |
          cd examples/wasm-capital-test
          wasm-pack build --target web

      - name: Verify example artifacts
        run: |
          test -f examples/wasm-capital-test/pkg/wasm_capital_test_bg.wasm
          test -f examples/wasm-capital-test/pkg/wasm_capital_test.js
          echo "âœ… WASM build successful!"

  examples:
    name: Build Examples
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Build examples (CPU only)
        run: |
          cargo build --release --manifest-path examples/simple-generation/Cargo.toml
          cargo build --release --manifest-path examples/chat/Cargo.toml
          cargo build --release --manifest-path examples/chat-streaming/Cargo.toml
          cargo build --release --manifest-path examples/benchmark/Cargo.toml

      - name: Build examples (with GPU feature)
        run: |
          cargo build --release --manifest-path examples/gpu-generation/Cargo.toml
          cargo build --release --features gpu --manifest-path examples/benchmark/Cargo.toml

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Build docs
        run: cargo doc --workspace --no-deps
  webgpu:
    name: WebGPU Shaders
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Build GPU crate
        run: cargo build --package wasm-chord-gpu

      - name: Check shader files exist
        run: |
          test -f crates/wasm-chord-gpu/src/matmul.wgsl
          test -f crates/wasm-chord-gpu/src/matmul_tiled.wgsl
          test -f crates/wasm-chord-gpu/src/rope.wgsl
          test -f crates/wasm-chord-gpu/src/softmax.wgsl
          test -f crates/wasm-chord-gpu/src/rmsnorm.wgsl

      - name: Test GPU backend compilation
        run: cargo test --package wasm-chord-gpu --lib
